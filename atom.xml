<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qwer的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/quan92/"/>
  <updated>2018-06-18T15:34:24.281Z</updated>
  <id>https://github.com/quan92/</id>
  
  <author>
    <name>quan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM进程执行过程中的异常诊断工具-Greys</title>
    <link href="https://github.com/quan92/2018/06/18/JVM%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-Greys/"/>
    <id>https://github.com/quan92/2018/06/18/JVM进程执行过程中的异常诊断工具-Greys/</id>
    <published>2018-06-17T16:00:00.000Z</published>
    <updated>2018-06-18T15:34:24.281Z</updated>
    
    <content type="html"><![CDATA[<p><strong>github主页</strong>：<a href="https://github.com/oldmanpushcart/greys-anatomy/wiki">https://github.com/oldmanpushcart/greys-anatomy/wiki</a></p><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>Greys是一个JVM进程执行过程中的异常诊断工具，可以在不中断程序执行的情况下轻松完成问题排查工作。简单讲，不用改代码去打印debug日志，也不用重启服务器。  </p><ul><li>有时候突然一个问题反馈上来，需要入参才能完成定位，但恰恰没有任何日志。回去加上重新部署，一杯咖啡时间过去了，是不是很崩溃？ </li><li>当你经过反复这样几次折腾之后变得聪明了，在自己的代码的所有入参和出参地方都加上debug日志，但这次问题似乎暴露在别人的代码中了…是不是很无奈？ </li><li>突然遇到线上一个性能问题无法确定到底是哪个环节的耗时，只能反复抓jstack猜，还有没有办法可以好好的过日子啦？</li></ul><p>遇到以上问题时，你就是我们这类工具的目标客户，此类工具能利用Java6的Instrumentation特性，动态增强你所指定的类，获取你想要到的信息   </p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在线安装（推荐）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|bash</span><br></pre></td></tr></table></figure></p><p>本地安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://ompc.oss.aliyuncs.com/greys/release/greys-stable-bin.zip</span><br><span class="line"># 解压后</span><br><span class="line">cd greys</span><br><span class="line">sh ./install-local.sh</span><br></pre></td></tr></table></figure></p><h4 id="启动Greys"><a href="#启动Greys" class="headerlink" title="启动Greys"></a>启动Greys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./greys.sh &lt;PID&gt;[@IP:PORT]</span><br></pre></td></tr></table></figure><h4 id="Greys命令详解"><a href="#Greys命令详解" class="headerlink" title="Greys命令详解"></a>Greys命令详解</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>help</td><td>查看命令的帮助文档，每个命令和参数都有很详细的说明</td></tr><tr><td>sc</td><td>查看JVM已加载的类信息</td></tr><tr><td>sm</td><td>查看已加载的方法信息</td></tr><tr><td>monitor</td><td>方法执行监控</td></tr><tr><td>trace</td><td>渲染方法内部调用路径，并输出方法路径上的每个节点上耗时</td></tr><tr><td>ptrace</td><td>强化版的trace命令。通过指定渲染路径，并可记录下路径中所有方法的入参、返值；与tt命令联动。</td></tr><tr><td>watch</td><td>方法执行数据观测</td></tr><tr><td>tt</td><td>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</td></tr><tr><td>stack</td><td>输出当前方法被调用的调用路径</td></tr><tr><td>js</td><td>支持使用JavaScript脚本；支持CommonJS部分规范模块化（BMD规范）</td></tr><tr><td>version</td><td>输出当前目标Java进程所加载的Greys版本号</td></tr><tr><td>quit</td><td>退出greys客户端</td></tr><tr><td>shutdown</td><td>关闭greys服务端</td></tr><tr><td>reset</td><td>重置增强类，将被greys增强过的类全部还原</td></tr><tr><td>session</td><td>查看当前会话</td></tr><tr><td>jvm</td><td>查看当前JVM的信息  </td></tr></tbody></table><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>常看命令帮助<br>help<br>help watch  </p><p><strong>具体使用详见：</strong><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf">https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;github主页&lt;/strong&gt;：&lt;a href=&quot;https://github.com/oldmanpushcart/greys-anatomy/wiki&quot;&gt;https://github.com/oldmanpushcart/greys-anatomy/
      
    
    </summary>
    
      <category term="201806" scheme="https://github.com/quan92/categories/201806/"/>
    
    
      <category term="工具" scheme="https://github.com/quan92/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程java.util.concurrent</title>
    <link href="https://github.com/quan92/2018/06/10/Java%20%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85%20java.util.concurrent/"/>
    <id>https://github.com/quan92/2018/06/10/Java 并发工具包 java.util.concurrent/</id>
    <published>2018-06-09T16:00:00.000Z</published>
    <updated>2018-06-10T13:52:26.104Z</updated>
    
    <content type="html"><![CDATA[<h4 id="java-util-concurrent-TimeUnit"><a href="#java-util-concurrent-TimeUnit" class="headerlink" title="java.util.concurrent.TimeUnit"></a>java.util.concurrent.TimeUnit</h4><hr><ol><li><p>时间颗粒度转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//常用的颗粒度</span><br><span class="line">TimeUnit.DAYS          //天    </span><br><span class="line">TimeUnit.HOURS         //小时    </span><br><span class="line">TimeUnit.MINUTES       //分钟    </span><br><span class="line">TimeUnit.SECONDS       //秒    </span><br><span class="line">TimeUnit.MILLISECONDS  //毫秒   </span><br><span class="line">TimeUnit.NANOSECONDS   //毫微秒  </span><br><span class="line">TimeUnit.MICROSECONDS  //微秒</span><br><span class="line"></span><br><span class="line">//时间颗粒度转换 </span><br><span class="line">public long toMillis(long d)    //转化成毫秒    </span><br><span class="line">public long toSeconds(long d)  //转化成秒    </span><br><span class="line">public long toMinutes(long d)  //转化成分钟    </span><br><span class="line">public long toHours(long d)    //转化成小时    </span><br><span class="line">public long toDays(long d)     //转化天</span><br><span class="line"></span><br><span class="line">//实例</span><br><span class="line">import java.util.concurrent.TimeUnit;    </span><br><span class="line">    </span><br><span class="line">public class Test &#123;    </span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;    </span><br><span class="line">        //1天有24个小时    1代表1天：将1天转化为小时    </span><br><span class="line">        System.out.println( TimeUnit.DAYS.toHours( 1 ) );    </span><br><span class="line">        //结果： 24    </span><br><span class="line">    </span><br><span class="line">        //1小时有3600秒    </span><br><span class="line">        System.out.println( TimeUnit.HOURS.toSeconds( 1 ));    </span><br><span class="line">        //结果3600    </span><br><span class="line">    </span><br><span class="line">        //把3天转化成小时    </span><br><span class="line">        System.out.println( TimeUnit.HOURS.convert( 3 , TimeUnit.DAYS ) );    </span><br><span class="line">        //结果是：72    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>延时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TimeUnit.SECONDS.sleep( 5 ); //等同于Thread.sleep( 5 * 1000 );</span><br></pre></td></tr></table></figure></li></ol><hr><table><thead><tr><th>&nbsp;</th><th>Throws Exception</th><th>Special Value</th><th>Blocks</th><th>Times Out </th></tr></thead><tbody><tr><td>Insert</td><td>add(o)</td><td>offer(o)</td><td>put(o)</td><td>offer(o, timeout, timeunit)</td></tr><tr><td>Remove</td><td>remove(o)</td><td>poll()</td><td>take()</td><td>poll(timeout, timeunit)</td></tr><tr><td>Examine</td><td>element()</td><td>peek()</td></tr></tbody></table><ul><li>Throws Exception: 如果试图的操作无法立即执行，抛一个异常。</li><li>Special Value: 如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。</li><li>Blocks: 如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。</li><li>Times Out: 如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</li></ul><hr><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><hr><p>ArrayBlockingQueue 是一个有界的阻塞队列</p><ul><li>内部实现是将对象放到一个数组里。数组有个特性：一旦初始化，大小就无法修改。因此无法修改ArrayBlockingQueue初始化时的上限。</li><li>ArrayBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个</li></ul><hr><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><hr><p>DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Delayed extends Comparable&lt;Delayed&lt; &#123;  </span><br><span class="line"> public long getDelay(TimeUnit timeUnit);  // 返回将要延迟的时间段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take 被调用的时候被释放掉。</li><li>Delayed 接口也继承了 java.lang.Comparable 接口，Delayed对象之间可以进行对比。这对DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.dz.juc;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.concurrent.DelayQueue;</span><br><span class="line">import java.util.concurrent.Delayed;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author yuquan_wang</span><br><span class="line"> * @date 2018/6/3 13:29</span><br><span class="line"> * DelayQueue 使用demo</span><br><span class="line"> **/</span><br><span class="line">public class DelayQueueExample &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        DelayQueue queue = new DelayQueue();</span><br><span class="line">        Delayed element1 = new DelayedElement(&quot;b&quot;,5000);</span><br><span class="line">        Delayed element2 = new DelayedElement(&quot;a&quot;,5000);</span><br><span class="line">        queue.put(element1);</span><br><span class="line">        queue.put(element2);</span><br><span class="line">        System.out.println(&quot;put time:&quot;+new Date());</span><br><span class="line">        Delayed out1 = queue.take();</span><br><span class="line">        Delayed out2 = queue.take();</span><br><span class="line">        System.out.println(out1);</span><br><span class="line">        System.out.println(out2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class DelayedElement implements Delayed&#123;</span><br><span class="line">    private String str;</span><br><span class="line">    private long expire;</span><br><span class="line"></span><br><span class="line">    public String getStr() &#123;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DelayedElement(String str, long l)&#123;</span><br><span class="line">        this.str = str;</span><br><span class="line">        this.expire = l+System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public long getDelay(TimeUnit unit) &#123;</span><br><span class="line">        return unit.convert(expire - System.currentTimeMillis(),TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Delayed 接口也继承了 java.lang.Comparable 接口，Delayed对象之间可以进行对比。</span><br><span class="line">     * 这对DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。</span><br><span class="line">     * @param o</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Delayed o) &#123;</span><br><span class="line">//        if(o==this)&#123;</span><br><span class="line">//            return 0;</span><br><span class="line">//        &#125;</span><br><span class="line">//        long l = this.getDelay(TimeUnit.MILLISECONDS)-o.getDelay(TimeUnit.MILLISECONDS);</span><br><span class="line">//        return l == 0 ? 0:(l&lt;0)? -1:1;</span><br><span class="line">        DelayedElement de = (DelayedElement) o;</span><br><span class="line">        return this.getStr().compareTo(de.getStr());</span><br><span class="line">       //return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return str +&quot;:&quot;+new Date(expire);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><hr><p>内部以一个链式结构(链接节点)对其元素进行存储 。</p><ul><li>可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。</li><li>内部以 FIFO(先进先出)的顺序对元素进行存储。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;java-util-concurrent-TimeUnit&quot;&gt;&lt;a href=&quot;#java-util-concurrent-TimeUnit&quot; class=&quot;headerlink&quot; title=&quot;java.util.concurrent.TimeUnit&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="201806" scheme="https://github.com/quan92/categories/201806/"/>
    
    
      <category term="java.util.concurrent" scheme="https://github.com/quan92/tags/java-util-concurrent/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="https://github.com/quan92/2018/06/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://github.com/quan92/2018/06/10/二叉树的遍历/</id>
    <published>2018-06-09T16:00:00.000Z</published>
    <updated>2018-06-10T13:46:55.796Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式"><a href="#二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式" class="headerlink" title="二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式"></a>二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式</h4><p>二叉树的遍历方式：</p><p>1、深度优先：递归，非递归实现方式</p><p>　　1)先序遍历：先访问根节点，再依次访问左子树和右子树</p><p>　　2)中序遍历：先访问左子树，再访问根节点吗，最后访问右子树</p><p>　　3)后序遍历：先访问左子树，再访问右子树，最后访问根节点</p><p>2、广度优先</p><p>按照树的深度，一层一层的访问树的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">package com.dz.suanfa;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">import java.util.Queue;</span><br><span class="line">import java.util.Stack;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author yuquan_wang</span><br><span class="line"> * @date 2018/6/10 20:24</span><br><span class="line"> **/</span><br><span class="line">public class BinaryTree &#123;</span><br><span class="line">    // 二叉树节点</span><br><span class="line">    static class BinaryTreeNode &#123;</span><br><span class="line">        int value;</span><br><span class="line">        BinaryTreeNode  left;</span><br><span class="line">        BinaryTreeNode  right;</span><br><span class="line"></span><br><span class="line">        public BinaryTreeNode (int value)&#123;</span><br><span class="line">            this.value=value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public BinaryTreeNode(int value, BinaryTreeNode left, BinaryTreeNode right) &#123;</span><br><span class="line">            super();</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.left = left;</span><br><span class="line">            this.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;value:&quot;+value == null?&quot;&quot;:String.valueOf(value) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 访问树的节点</span><br><span class="line">    public static void visit(BinaryTreeNode node) &#123;</span><br><span class="line">        System.out.print(node.value+ &quot; &quot; );</span><br><span class="line">    &#125;</span><br><span class="line">    /** 递归实现二叉树的先序遍历 */</span><br><span class="line">    public static void preOrder(BinaryTreeNode node)&#123;</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            visit(node);</span><br><span class="line">            preOrder(node.left);</span><br><span class="line">            preOrder(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /** 递归实现二叉树的中序遍历 */</span><br><span class="line">    public static void inOrder(BinaryTreeNode node) &#123;</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            inOrder(node.left);</span><br><span class="line">            visit(node);</span><br><span class="line">            inOrder(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /** 递归实现二叉树的中序遍历 */</span><br><span class="line">    public static void postOrder(BinaryTreeNode node) &#123;</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            postOrder(node.left);</span><br><span class="line">            postOrder(node.right);</span><br><span class="line">            visit(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /** 非递归实现二叉树的先序遍历 */</span><br><span class="line">    public static void iterativePreorder(BinaryTreeNode node) &#123;</span><br><span class="line">        Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            while (!stack.empty()) &#123;</span><br><span class="line">                node = stack.pop();</span><br><span class="line">                // 先访问节点</span><br><span class="line">                visit(node);</span><br><span class="line">                if (node.right != null) &#123;</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                // 把左子结点压入栈</span><br><span class="line">                if (node.left != null) &#123;</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /** 非递归实现二叉树的中序遍历 */</span><br><span class="line">    public static void iterativeInOrder(BinaryTreeNode root) &#123;</span><br><span class="line">        Stack&lt;BinaryTreeNode&gt; stack = new Stack&lt;BinaryTreeNode&gt;();</span><br><span class="line">        BinaryTreeNode node = root;</span><br><span class="line">        while (node != null || stack.size() &gt; 0) &#123;</span><br><span class="line">            // 把当前节点的所有左侧子结点压入栈</span><br><span class="line">            while (node != null) &#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            // 访问节点，处理该节点的右子树</span><br><span class="line">            if (stack.size() &gt; 0) &#123;</span><br><span class="line">                node = stack.pop();</span><br><span class="line">                visit(node);</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /** 二叉树广度优先遍历——层序遍历 */</span><br><span class="line">    public static void layerTraversal(BinaryTreeNode root) &#123;</span><br><span class="line">        Queue&lt;BinaryTreeNode&gt; queue = new LinkedList&lt;BinaryTreeNode&gt;();</span><br><span class="line">        if (root != null) &#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">            while (!queue.isEmpty())&#123;</span><br><span class="line">                BinaryTreeNode currentNode = queue.poll();</span><br><span class="line">                visit(currentNode);</span><br><span class="line">                if (currentNode.left != null) &#123;</span><br><span class="line">                    queue.add(currentNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                if (currentNode.right != null) &#123;</span><br><span class="line">                    queue.add(currentNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // 构造二叉树</span><br><span class="line">        //    1</span><br><span class="line">        //   / \</span><br><span class="line">        //  2   3</span><br><span class="line">        // /   / \</span><br><span class="line">        //4   5   7</span><br><span class="line">        //     \  /</span><br><span class="line">        //     6  8</span><br><span class="line">        BinaryTreeNode root = new BinaryTreeNode(1);</span><br><span class="line">        BinaryTreeNode node2 = new BinaryTreeNode(2);</span><br><span class="line">        BinaryTreeNode node3 = new BinaryTreeNode(3);</span><br><span class="line">        BinaryTreeNode node4 = new BinaryTreeNode(4);</span><br><span class="line">        BinaryTreeNode node5 = new BinaryTreeNode(5);</span><br><span class="line">        BinaryTreeNode node6 = new BinaryTreeNode(6);</span><br><span class="line">        BinaryTreeNode node7 = new BinaryTreeNode(7);</span><br><span class="line">        BinaryTreeNode node8 = new BinaryTreeNode(8);</span><br><span class="line"></span><br><span class="line">        root.left = node2;</span><br><span class="line">        root.right = node3;</span><br><span class="line">        node2.left = node4;</span><br><span class="line">        node3.left = node5;</span><br><span class="line">        node3.right = node7;</span><br><span class="line">        node5.right = node6;</span><br><span class="line">        node7.left = node8;</span><br><span class="line">        System.out.println(&quot;二叉树先序遍历&quot;);</span><br><span class="line">        preOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;二叉树先序遍历非递归&quot;);</span><br><span class="line">        iterativePreorder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;二叉树中序遍历&quot;);</span><br><span class="line">        inOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;二叉树中序遍历非递归&quot;);</span><br><span class="line">        iterativeInOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;二叉树后序遍历&quot;);</span><br><span class="line">        postOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">//        System.out.println(&quot;二叉树单栈非递归后序遍历&quot;);</span><br><span class="line">//        iterativePostOrder(root);</span><br><span class="line">//        System.out.println(&quot;二叉树双栈非递归后序遍历&quot;);</span><br><span class="line">//        iterativePostOrderByTwoStacks(root);</span><br><span class="line">        System.out.println(&quot;二叉树层树序遍历&quot;);</span><br><span class="line">        layerTraversal(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式&quot;&gt;&lt;a href=&quot;#二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式&quot; class=&quot;headerlink&quot; title=&quot;二叉树的广度优先遍历、深度优先遍历的递归和非递归实现方式&quot;&gt;&lt;/a&gt;二叉
      
    
    </summary>
    
      <category term="201806" scheme="https://github.com/quan92/categories/201806/"/>
    
    
      <category term="算法" scheme="https://github.com/quan92/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>八皇后 （深度优先算法）</title>
    <link href="https://github.com/quan92/2018/06/10/%E5%85%AB%E7%9A%87%E5%90%8E/"/>
    <id>https://github.com/quan92/2018/06/10/八皇后/</id>
    <published>2018-06-09T16:00:00.000Z</published>
    <updated>2018-06-10T13:47:19.536Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package com.dz.Queen8;</span><br><span class="line"></span><br><span class="line">/**八皇后</span><br><span class="line"> * 深度优先搜索(Depth First Search)</span><br><span class="line"> * @author yuquan_wang</span><br><span class="line"> * @date 2018/6/10 16:04</span><br><span class="line"> **/</span><br><span class="line">public class Queen8 &#123;</span><br><span class="line">    static int size = 8;</span><br><span class="line">     int[][] chessBoard = new int[size][size];</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Queen8 queen8 = new Queen8();</span><br><span class="line">        queen8.settleQueen(0);</span><br><span class="line">        queen8.printResult();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查落地是否合规</span><br><span class="line">     * @param x</span><br><span class="line">     * @param y</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    boolean check(int x,int y)&#123;</span><br><span class="line">        for (int i =0;i&lt;y;i++)&#123;</span><br><span class="line">            //检查纵向</span><br><span class="line">            if(chessBoard[x][i] == 1)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            //检查左侧斜向</span><br><span class="line">            if(x-1-i&gt;=0&amp;&amp; chessBoard[x-1-i][y-1-i] == 1)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            //检查右侧斜向</span><br><span class="line">            if(x+1+i&lt;size&amp;&amp; chessBoard[x+1+i][y-1-i] == 1)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean settleQueen(int y)&#123;</span><br><span class="line">        //行数到8，算完了</span><br><span class="line">        if(y == size)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        //遍历x，</span><br><span class="line">        for (int i= 0;i &lt;size;i++)&#123;</span><br><span class="line">            //重置，回溯的时候重新算</span><br><span class="line">            for (int x=0;x&lt;size;x++)&#123;</span><br><span class="line">                chessBoard[x][y]=0;</span><br><span class="line">            &#125;</span><br><span class="line">            //是否符合规则</span><br><span class="line">            if (check(i, y)) &#123;</span><br><span class="line">                chessBoard[i][y] = 1;</span><br><span class="line">                //返回true就无需继续递归</span><br><span class="line">                if(settleQueen(y+1))&#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 打印结果</span><br><span class="line">     */</span><br><span class="line">    void printResult()&#123;</span><br><span class="line">        for (int j=0;j&lt;size;j++)&#123;</span><br><span class="line">            for (int i=0;i&lt;size;i++)&#123;</span><br><span class="line">                System.out.print(chessBoard[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653193309&amp;idx=1&amp;sn=dd68a60873bb360e02afde21acde7d3f&amp;chksm=8c99f687bbee7f91049c253dd3193c9a60d6d98cd315b0140a8635b2d34933b54a19127921a9&amp;scene=21#wechat_redirect/" target="_blank" rel="noopener"> 程序员小灰-漫画：什么是八皇后问题？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="201806" scheme="https://github.com/quan92/categories/201806/"/>
    
    
      <category term="算法" scheme="https://github.com/quan92/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>动态扩展平台dep扩展脚本的实现</title>
    <link href="https://github.com/quan92/2018/05/12/%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E5%B9%B3%E5%8F%B0dep%E6%89%A9%E5%B1%95%E8%84%9A%E6%9C%AC%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/quan92/2018/05/12/动态扩展平台dep扩展脚本的实现/</id>
    <published>2018-05-12T03:19:23.000Z</published>
    <updated>2018-05-12T03:40:39.304Z</updated>
    
    <content type="html"><![CDATA[<p>Cglib动态代理增强后，使用rhino脚本引擎来实现。jdk6已继承rhino，jdk8被Nashorn代替。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package main;</span><br><span class="line"></span><br><span class="line">import sun.org.mozilla.javascript.internal.Context;</span><br><span class="line">import sun.org.mozilla.javascript.internal.Scriptable;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by kingdee on 2018/5/11.</span><br><span class="line"> */</span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Demo().testRhino();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void testRhino() &#123;</span><br><span class="line">        Context ctx = Context.enter();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Scriptable scope =  ctx.initStandardObjects();</span><br><span class="line">            String ttt = &quot;helloworld&quot;;</span><br><span class="line">            scope.put(&quot;ttt&quot;,scope,ttt);</span><br><span class="line"></span><br><span class="line">            //如此设置脚本里就能拿到对应的，dep脚本里处理控件就是这么玩的</span><br><span class="line">            Hello hello = new Hello();</span><br><span class="line">            hello.setWorld(&quot;hello world ,hahaha&quot;);</span><br><span class="line">            hello.put(&quot;10086&quot;,&quot;中国移动&quot;);</span><br><span class="line">            hello.put(&quot;10010&quot;,&quot;中国联通&quot;);</span><br><span class="line">            scope.put(&quot;pluginCtx&quot;,scope,hello);</span><br><span class="line"></span><br><span class="line">            String jsStr=&quot;var date=new java.util.Date();&quot; +</span><br><span class="line">                    &quot;java.lang.System.out.println(pluginCtx.getWorld());&quot; +</span><br><span class="line">                    &quot;java.lang.System.out.println(\&quot;get(10086) \&quot;+pluginCtx.get(\&quot;10086\&quot;));&quot; +</span><br><span class="line">                    &quot;java.lang.System.out.println(\&quot;get(10010) \&quot;+pluginCtx.get(\&quot;10010\&quot;));&quot;;</span><br><span class="line">            Object result=ctx.evaluateString(scope, jsStr, null, 0,null);</span><br><span class="line">            System.out.println(&quot;result=&quot;+result);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            Context.exit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Hello&#123;</span><br><span class="line">        public Hello() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        private Map components = new HashMap&lt;&gt;();</span><br><span class="line">        private String world;</span><br><span class="line"></span><br><span class="line">        public String getWorld() &#123;</span><br><span class="line">            return world;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setWorld(String world) &#123;</span><br><span class="line">            this.world = world;</span><br><span class="line">        &#125;</span><br><span class="line">        public void put(String key ,Object value)&#123;</span><br><span class="line">            this.components.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        public Object get(String key)&#123;</span><br><span class="line">            return this.components.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cglib动态代理增强后，使用rhino脚本引擎来实现。jdk6已继承rhino，jdk8被Nashorn代替。&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="201805" scheme="https://github.com/quan92/categories/201805/"/>
    
    
      <category term="js" scheme="https://github.com/quan92/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>safari回调函数中调用window.open被浏览器拦截</title>
    <link href="https://github.com/quan92/2018/05/01/20180501-%20safari%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%B8%AD%E8%B0%83%E7%94%A8window.open%E8%A2%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8B%A6%E6%88%AA/"/>
    <id>https://github.com/quan92/2018/05/01/20180501- safari回调函数中调用window.open被浏览器拦截/</id>
    <published>2018-05-01T03:19:23.000Z</published>
    <updated>2018-05-01T10:50:13.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="safari回调函数中调用window-open被浏览器拦截"><a href="#safari回调函数中调用window-open被浏览器拦截" class="headerlink" title="safari回调函数中调用window.open被浏览器拦截"></a>safari回调函数中调用window.open被浏览器拦截</h3><ul><li><ol><li>safari偏好设置 - 高级- 不勾选阻止弹出式窗口</li></ol></li><li><ol start="2"><li>利用a标签的href，模拟点击a标签跳转<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//创建a标签</span><br><span class="line">var ahtml = &apos;&lt;a id=&quot;xiaoyun_a&quot; target=&quot;_blank&quot; style = &quot;display:none&quot;&gt;&lt;span id=&quot;xiaoyun_p&quot;&gt;xiaoyun_p&lt;/span&gt;&lt;/a&gt;&apos;;</span><br><span class="line">$(&quot;body&quot;).append(ahtml);</span><br><span class="line"></span><br><span class="line">//window.open(url, &quot;_blank&quot;);</span><br><span class="line">$(&quot;#xiaoyun_a&quot;).attr(&apos;href&apos;,url);</span><br><span class="line">//safari a标签没有click事件，需要手动创建事件触发</span><br><span class="line">function dispatch(dom)&#123;</span><br><span class="line">if(dom.click)&#123;</span><br><span class="line">dom.click();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">try&#123;</span><br><span class="line">var evt = document.createEvent(&apos;Event&apos;);  </span><br><span class="line">evt.initEvent(&quot;click&quot;,true,true);</span><br><span class="line">dom.dispatchEvent(evt);</span><br><span class="line"> &#125;catch(e)&#123;</span><br><span class="line">alert(e);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var div1= document.getElementById(&apos;xiaoyun_p&apos;);</span><br><span class="line">dispatch(div1);</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;safari回调函数中调用window-open被浏览器拦截&quot;&gt;&lt;a href=&quot;#safari回调函数中调用window-open被浏览器拦截&quot; class=&quot;headerlink&quot; title=&quot;safari回调函数中调用window.open被浏览器拦截&quot;&gt;
      
    
    </summary>
    
      <category term="201805" scheme="https://github.com/quan92/categories/201805/"/>
    
    
      <category term="js" scheme="https://github.com/quan92/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/quan92/2018/05/01/hello-world/"/>
    <id>https://github.com/quan92/2018/05/01/hello-world/</id>
    <published>2018-05-01T02:24:45.187Z</published>
    <updated>2018-05-01T09:03:40.608Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="test" scheme="https://github.com/quan92/categories/test/"/>
    
    
      <category term="tag" scheme="https://github.com/quan92/tags/tag/"/>
    
  </entry>
  
</feed>
